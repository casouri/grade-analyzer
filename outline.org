* Outline
** Things need to learn
- javascript
- html, css
- vue 
- canvas API
- oauth 2.0
- python data visualization

** To be decided
- requirement
- functionality
- GUI

** Basic structure
This program applies a basic client-server model.
Frontend is a local webpage rendered by Vue.js.
It communicates with backend server written in Python to analyze the gradebook. Communication is done via AJAX.

*** Why separate the program into a frontend and a backend?
1. Because This is a school project which requires Python
2. (minor) I don't like javascript very much

*** What does the client do and what does the server do?
Client handles all the human interface and manipulates the form (gradebook). The server analyzes forms sent by client.

** Dependency
- Javascript
  - Vue.js
- Python
  - requests

** functionality
- What grade do I need for certain expected final grade.
  - customize:
    - how many assignments left
    - extra credit
    - drop lowest grade
    - replace grade (different rules)

- What final grade will I get if I have certain grade for the rest assignments.
  - customize:
    - grade

- How many points can I lost to get a certain final grade.
  - assignment group

- point conversion between assignment groups

- grade trend
  
- GPA calculation for each case for each course
 
- calculate GPA with previous data

- Export gradebook to a csv file.

** Project standards
Please read through this article(I swear this is very helpful):
http://docs.python-guide.org/en/latest/writing/style/

*** variable format
Use snake-case(separate words with underscore).

*** docstring
Please follow the format below:

#+BEGIN_SRC python
def some_function(arg1, arg2):
    """One line description of the function.
- Arguments:
  - arg1 (type): description of the argument
  - arg2 (type): description of the argument

- Return:
  - type: description of the return value
  - type: description of the return value

(Other detailed descriptions)
"""
#+END_SRC

** Data structure
*** structure of form (gradebook)
Gradebooks of a student are stored and transferred in this structure.
It is represented by a dict object made of two key-value pairs: quiz and assignment, each of them is a list object, each elements is a row in the form(quizzes in quiz and assignments in assignment). Each element is a dict object that keys are row headers(name, grade, assignment group, etc).
Beside quiz and assignment, a form also need grading_standard and assignment_group element.


An example form (not all required elements included):
#+BEGIN_SRC json
{
  "quiz": {
            "1(id)": {"name": "quiz 1", "grade": "A", "display grade": "A"}, 
            "2(id)": {"name": "quiz 1", "grade": "18", "display grade": null}, 
            "3(id)": {"name": "quiz 1", "grade": "10", "display grade": null}, 
            "4(id)": {"name": "quiz 1", "grade": "15", "display grade": null}
          },
  "assignment": {
                  "1(id)": { "name": "hw 1", 
                           "grade": "92", 
                           "display_grade": "78", 
                           "assignment_group_id": 1 }, 
                  "2(id)": { "name": "hw 2", 
                           "grade": "79", 
                           "display_grade": "78", 
                           "assignment_group_id": 1 }, 
                  "3(id)": { "name": "test1", 
                           "grade": "88", 
                           "display_grade": "78", 
                           "assignment_group_id": 2 }, 
                  "4(id)": { "name": "final", 
                           "grade": "96", 
                           "display_grade": "78", 
                           "assignment_group_id": 2 },
                  },
"assignment_group": { "1(id)": { "name": "homework",
                               "rule": {
                                         "drop_lowest": 1,
                                         "group_weight": 20,
                                       } 
                             } 
                    },
"grading_standard": { "1(id)": { "A": 94, "B": 85}},
}
#+END_SRC

*** Detailed spec
- id (str) :: id of each object
- Each element of quiz/assignment have to have following keys:
  - 'name' (str) :: the name of the quiz/assignment
  - 'grade' (str) :: the grade fetched from canvas
  - 'display_grade' (str) :: The grade displayed on the GUI
  - 'grading_type' (str) :: The type of the grade, possible values are 'letter_grade', 'gpa_scale', 'points'.
  - 'grading_standard_id' (int) :: The id of the grading standard being applied to this assignment. Valid if grading_type is 'letter_grade' or 'gpa_scale'.
  - 'omit_from_final_grade' (bool) :: If true, the assignment will be omitted from the student's final grade.
  - 'points_possible' (int) :: the maximum points possible for the assignment
  - to handle different grading types, consult https://canvas.instructure.com/doc/api/submissions.html#method.submissions_api.update

- Beside keys above, assignment requires these values:
  - 'assignment_group_id' (int) :: assignment group fetched from canvas

- assignment group:
  Each assignment group is a dict made of these keys:
  - 'name' (str) :: name of the group
  - 'group_weight' (int) :: The percent of the total grade that this assignment group represents
  - 'rules' (dict) :: each key is a rule. TODO list all possible rules.
                      
- grading standard:
  Specifies that how to convert letter grade into numbers
  It is a dict of lists.
  Each key is the id of each standard.
  Each value is a dict of standard specs
  - key (str) :: id
  - value (dict) :: the standard
    In each standard:
    - key :: the name of letter grade, i.e. 'A', 'A-', etc.
    - value (int) :: the number to convert to

Notes of canvas API
https://docs.google.com/document/d/18mY4ZMRscildJ9EnHjZwiuBcDzkvbcuOQummDGHEGOY/edit?usp=sharing

** Spec for each component
Only public functions
*** canvas.py
- get_token() :: get token from canvas api and return it.
- fetch_grade() :: fetch grade information from 

** Distribution of work
   

*** Yuan 
- server
- fetch data from Canvas
- analyze grade
*** Primo
- frontend
- analyze grade
*** Emily
- fetch data from Canvas
- analyze grade
*** Lily
- visualize grade
- analyze grade
- compose report

  
* Files

** server.py
The backend server.

** demo.py
In order to use this demo cli to mess around with gradebook, 
follow instructions below.

1. Create a file =server-config.json= under same directory as the setting.

=server-config.json= follows this format:
#+BEGIN_SRC json
{
    "api_url": "https://canvas.instructure.com",
    "token": "the token of yours"
}
#+END_SRC

2. To get the token, open your Canvas, click Account -- settings,
scroll to bottom, in "Approved Integrations" section click "New Access Token".
Enter a purpose and set a expire date of the token.

Then copy that token into your =server-config.json= file.

3. Install our dependency library =canvasapi= to your machine.
   
4. run =demo.py=. You can run it either in command line or in IDE.


hahaha zeyuan is using git!
